@inject PeriodAPI PeriodAPI
@inject FirebaseAuthClient AuthClient
@inject NavigationManager NavManager
@page "/"


<div class="home">
    <div style="background-color: rgba(0,0,0,0.3); height: 100%; width: 100%; z-index: 100; position: fixed; top: 0; right: 0;" hidden="@popupHidden"/>
    @if (null != AuthClient.User) 
    {
        <ResetPopUp @bind-PopupHidden="@popupHidden"/>
    }
    <div class="home_header">
        <button class="home_header_button" onclick="@(() => OnClickReset())">
            Reset Counter
        </button>
    </div>
    <div class="home_body">
        <div class="home_body_counter">
            <div class="home_body_counter_inside">
                <div style="margin: auto; display: block;" hidden="@counterHidden">
                    <div class="counter_text">
                        <b>@Convert.ToInt32(daysSinceLastSubmit)</b>
                    </div>
                    <div style="color: white; width: 100%; font-size: 18px; text-align: center;">
                        Days Since Last Period Started
                    </div>
                    <div style="color: white; width: 100%; text-align: center; font-size: 14px;">
                        @lastReset.ToString("dd/MM/yyyy")
                    </div>
                </div>
                <div style="margin: auto; display: block;" hidden="@(!counterHidden)">
                    <div style="width: 100%; display: flex;">
                        <img src="/img/transparent_background_icon_frown.png" style="object-fit: contain; max-height: 70%; max-width: 70%; width: auto; height: auto; margin-left: auto; margin-right: auto;" />
                    </div>
                    <div style="color: red; width: 100%; font-size: 25px; text-align: center; text-shadow: 0 0 2px black, 0 0 2px black, 0 0 2px black, 0 0 2px black;">
                        <b>NO DATA</b>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    DateTime lastReset;
    double daysSinceLastSubmit;
    static IDispatcherTimer? timer;
    bool counterHidden = true;
    bool popupHidden = true;

    async protected override Task OnInitializedAsync()
    {
        if (AuthClient.User == null) 
        {
            NavManager.NavigateTo("/signin");
        }

        await base.OnInitializedAsync();
    }

    async protected override Task OnAfterRenderAsync(bool firstRender)
    {
        base.OnAfterRender(firstRender);

        if (firstRender) {
            PermissionStatus status = await Permissions.CheckStatusAsync<Permissions.PostNotifications>();
            if (!(status == PermissionStatus.Granted))
            {
                await Permissions.RequestAsync<Permissions.PostNotifications>();
            }

            AuthClient.AuthStateChanged += LoginCheck;

            await CrossFirebaseCloudMessaging.Current.CheckIfValidAsync();
            var fcmToken = await CrossFirebaseCloudMessaging.Current.GetTokenAsync();

            await GetLastSubmit();

            var deviceReg = new DeviceRegistration(AuthClient.User!.Uid, fcmToken);
            await PeriodAPI.DeviceRegister(deviceReg, await AuthClient.User.GetIdTokenAsync());

            StartTimer();
        }
    }

    void LoginCheck(object? sender, UserEventArgs eventArgs)
    {
        if (eventArgs.User == null)
        {
            NavManager.NavigateTo("/signin");
        }
    }

    void StartTimer()
    {
        if (null != Application.Current) 
        {
            try
            {
                timer = Application.Current.Dispatcher.CreateTimer();
                timer.Interval = TimeSpan.FromSeconds(30);
                timer.Tick -= GetLastSubmit;
                timer.Tick += GetLastSubmit;
                timer.Start();
            } 
            catch(Exception ex)
            {
                Console.WriteLine(ex.ToString());
            }
        }
    }

    async Task GetLastSubmit()
    {
        Console.WriteLine("Get last submit");

        try
        {
            if (null != AuthClient.User) 
            {
                var lastTime = await PeriodAPI.GetLast(await AuthClient.User.GetIdTokenAsync());

                if (null != lastTime)
                {
                    lastReset = lastTime.StartTime;
                    var timeSpan = DateTime.Now - lastReset;
                    daysSinceLastSubmit = (timeSpan.TotalDays);
                    counterHidden = false;
                }
                else
                {
                    counterHidden = true;
                }

                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.ToString());
        }
    }

    async void GetLastSubmit(object? sender, EventArgs e)
    {
        Console.WriteLine("Get last submit timer");

        try
        {
            await GetLastSubmit();
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.ToString());
        }
    }

    void OnClickReset()
    {
        popupHidden = false;
    }
}